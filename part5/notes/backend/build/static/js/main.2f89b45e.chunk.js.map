{"version":3,"sources":["../../../notes-frontend/src/components/Note.js","../../../notes-frontend/src/components/Notification.js","../../../notes-frontend/src/components/Footer.js","../../../notes-frontend/src/services/notes.js","../../../notes-frontend/src/App.js","../../../notes-frontend/src/index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportantOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","value","onChange","console","log","target","type","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2f89b45e.chunk.js","sourcesContent":["import React from 'react';\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important'\n    : 'make important';\n  \n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n}\n\nexport default Note;","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n}\n\nexport default Footer;\n","import axios from 'axios';\nconst baseURL = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseURL);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const request = axios.post(baseURL, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseURL}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\nexport default { \n  getAll, \n  create, \n  update\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes'\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n      });\n  }, []);\n  \n  const toggleImportantOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n      })\n      .catch(error => {\n       setErrorMessage(\n         `Note: '${note.content}' was already removed from server`\n       )\n       setTimeout(() => {\n         setErrorMessage(null)\n       }, 5000);\n        setNotes(notes.filter(n => n.id !== id))\n      });\n  }\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('');\n      });\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true);\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportantOf(note.id)}\n    />\n  );\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}  \n        />\n        <button type='submit'>save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}