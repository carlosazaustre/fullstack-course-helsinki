{"ast":null,"code":"import _objectSpread from \"/Users/cazaustre/code/src/github.com/carlosazaustre/fullstack-course-helsinki/part2/notes/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/cazaustre/code/src/github.com/carlosazaustre/fullstack-course-helsinki/part2/notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/cazaustre/code/src/github.com/carlosazaustre/fullstack-course-helsinki/part2/notes/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState('a new note...'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data);\n    });\n  }, []);\n\n  const toggleImportantOf = id => {\n    const note = notes.find(n => n.id === id);\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    });\n\n    noteService.update(id, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n    });\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(response => {\n      setNotes(notes.concat(noteObject));\n      setNewNote('');\n    });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true);\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportantOf(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/cazaustre/code/src/github.com/carlosazaustre/fullstack-course-helsinki/part2/notes/src/App.js"],"names":["React","useState","useEffect","noteService","Note","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","response","data","toggleImportantOf","id","note","find","n","changedNote","important","update","map","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","create","concat","notesToShow","filter","rows","handleNoteChange","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport noteService from './services/notes'\nimport Note from './components/Note';\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data);\n      });\n  }, []);\n  \n  const toggleImportantOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data));\n      });\n  }\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(noteObject));\n        setNewNote('');\n      });\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true);\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportantOf(note.id)}\n    />\n  );\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}  \n        />\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}